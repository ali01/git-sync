#!/usr/bin/env python3

import argparse
import select
import socket
import subprocess
import sys


SOCKET_BUFFER_SIZE = 4096  # bytes
SOCKET_TIMEOUT = 5.0       # seconds


class CallReturnValue(object):
  def __init__(self):
    self.status = 0
    self.stdout, self.stdout_r = socket.socketpair(type=socket.SOCK_DGRAM)
    self.stderr, self.stderr_r = socket.socketpair(type=socket.SOCK_DGRAM)

    self.stdout.settimeout(SOCKET_TIMEOUT)
    self.stderr.settimeout(SOCKET_TIMEOUT)
    self.stdout_r.settimeout(SOCKET_TIMEOUT)
    self.stderr_r.settimeout(SOCKET_TIMEOUT)

  def __del__(self):
    self.stdout.close()
    self.stderr.close()
    self.stdout_r.close()
    self.stderr_r.close()

  def read(self):
    out_str, err_str = "", ""
    while True:
      rl, _, _ = select.select([self.stdout_r, self.stderr_r], [], [], 0.0)
      if len(rl) == 0:
        break

      ret = rl[0].recv(SOCKET_BUFFER_SIZE).decode('utf-8')

      if rl[0] == self.stdout_r:
        out_str += ret

      else:
        err_str += ret

    return out_str.strip(), err_str.strip()


def run_command(*arg, shell=True):
  ret = CallReturnValue()
  ret.status = subprocess.call(*arg, shell=shell,
                               stdout=ret.stdout, stderr=ret.stderr)
  stdout, stderr = ret.read()

  if ret.status != 0:
    raise RuntimeError(stderr)

  return stdout, stderr


class Remote(object):

  def __init__(self, name):
    remote_url, _ = run_command("git config --get remote.%s.url" % name)
    self.host, self.path = [ s for s in remote_url.split(':') ]
    self.name = name

  def __str__(self):
    return "'%s' at %s:%s" % (self.name, self.host, self.path)

  def run_command(self, command, shell=True):
    return run_command("ssh %s \"cd %s && %s\"" %
                       (self.host, self.path, command), shell=shell)


def parse_command_line():
  parser = argparse.ArgumentParser()
  parser.add_argument("remote", nargs="?", default="origin",
                      help="The remote with which to synchronize with. "
                           "If left unspecified, the 'origin' remote is used.")
  parser.add_argument("-c", "--command",
                      help="Shell command to run after sync.")
  return parser.parse_args()


def main(argv):
  args = parse_command_line()

  remote = Remote(args.remote)
  branch, _ = run_command("git rev-parse --abbrev-ref HEAD")

  print("Synchronizing local branch '%s' onto remote %s." % (branch, remote))

  remote.run_command("git co HEAD@{0}")
  stdout, stderr = run_command("git push --force %s" % args.remote)

  print("%s%s" % (stdout, stderr))

  remote.run_command("git co %s" % branch)

  if args.command:
    stdout, stderr = remote.run_command(args.command)
    print("%s%s" % (stdout, stderr))


if __name__ == "__main__":
  sys.exit(main(sys.argv))
